comment: Detailed view of a single JVM thread
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        	/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	public formatCount(value: any) {
        		if (value === null || value === undefined) { return "n/a"; }
        		try { return Number(value).toLocaleString(); } catch (e) { return String(value); }
        	}
        	public formatMillis(value: any) {
        		if (value === null || value === undefined) { return "n/a"; }
        		const n = Number(value);
        		if (Number.isNaN(n)) { return String(value); }
        		if (n >= 60000) { return (n / 60000).toFixed(1) + " min"; }
        		if (n >= 1000) { return (n / 1000).toFixed(1) + " s"; }
        		return n + " ms";
        	}
        	public formatTimestamp(value: any) {
        		if (!value) { return "n/a"; }
        		try { const d = new Date(value); return isNaN(d.getTime()) ? String(value) : d.toLocaleString(); } catch (e) { return String(value); }
        	}
        	public formatBoolean(value: any) {
        		return value ? "Yes" : "No";
        	}
        	public currentThread(): any {
        		return (this.global && this.global.selectedThread) ? this.global.selectedThread : null;
        	}
        	public formatLock(value: any) {
        		return value ? String(value) : "—";
        	}
        	public trackFrame(index: number, frame: any) {
        		const f = frame && frame.frame ? frame.frame : frame;
        		return f && f.text ? f.text + "__" + index : index;
        	}
        	public formatFrame(frame: any) {
        		const f = frame && frame.frame ? frame.frame : frame;
        		if (!f) { return ""; }
        		if (f.text) { return f.text; }
        		const parts = [f.className, f.methodName].filter(Boolean).join(".");
        		const location = f.fileName ? (f.fileName + (typeof f.lineNumber === "number" && f.lineNumber >= 0 ? ":" + f.lineNumber : "")) : "";
        		return location ? parts + " (" + location + ")" : parts;
        	}
        	public isNativeFrame(frame: any) {
        		const f = frame && frame.frame ? frame.frame : frame;
        		return !!(f && f.native);
        	}
        	public detail(): any {
        		return (this.global && this.global.threadDetails) ? this.global.threadDetails : null;
        	}
        	public detailField(key: string, fallback: any = null): any {
        		const detail = this.detail();
        		if (detail && detail.hasOwnProperty(key) && detail[key] !== undefined && detail[key] !== null) {
        			return detail[key];
        		}
        		const summary = this.currentThread();
        		if (summary && summary.hasOwnProperty(key) && summary[key] !== undefined && summary[key] !== null) {
        			return summary[key];
        		}
        		return fallback;
        	}
        	public stackFrames(): any[] {
        		const detail = this.detail();
        		return detail && Array.isArray(detail.stackTrace) ? detail.stackTrace : [];
        	}
        	public stateColor(state: string): string {
        		switch (state) {
        			case "RUNNABLE":
        				return "success";
        			case "WAITING":
        				return "tertiary";
        			case "TIMED_WAITING":
        				return "warning";
        			case "BLOCKED":
        				return "danger";
        			case "TERMINATED":
        				return "medium";
        			default:
        				return "medium";
        		}
        	}
        	public detailState(): string {
        		return String(this.detailField("state", "unknown"));
        	}
        	public summaryBadges(): any[] {
        		const badges: any[] = [];
        		const detail = this.detail();
        		const summary = this.currentThread();
        		const isDaemon = this.detailField("daemon", summary && summary.daemon);
        		const isNative = this.detailField("inNative", summary && summary.inNative);
        		const isSuspended = this.detailField("suspended", summary && summary.suspended);
        		const isDeadlocked = this.detailField("deadlocked", summary && summary.deadlocked);
        		if (isDeadlocked) {
        			badges.push({ label: "Deadlocked", color: "danger" });
        		}
        		if (isDaemon) {
        			badges.push({ label: "Daemon", color: "medium" });
        		}
        		if (isSuspended) {
        			badges.push({ label: "Suspended", color: "warning" });
        		}
        		if (isNative) {
        			badges.push({ label: "Native", color: "tertiary" });
        		}
        		if (detail && detail.lockOwnerName) {
        			badges.push({ label: "Owner: " + detail.lockOwnerName, color: "light" });
        		}
        		return badges;
        	}
        	public stackAsText(): string {
        		const detail = this.detail();
        		if (detail && detail.stackAsText) {
        			return String(detail.stackAsText);
        		}
        		const frames = this.stackFrames();
        		if (!frames.length) {
        			return "No stack frames captured.";
        		}
        		return frames.map((frame: any) => this.formatFrame(frame)).join("\n");
        	}
        	public copyFullStack(): void {
        		const text = this.stackAsText();
        		if (!text) {
        			return;
        		}
        		try {
        			if (typeof navigator !== "undefined" && navigator.clipboard && navigator.clipboard.writeText) {
        				navigator.clipboard.writeText(text);
        			}
        		} catch (error) {
        			if (this.c8o && this.c8o.log && this.c8o.log.warn) {
        				this.c8o.log.warn("[ThreadDetails] copyFullStack failed", error);
        			}
        		}
        	}
        	/*End_c8o_PageFunction*/
        '
segment: thread-details
title: Thread Details
↓Header [ngx.components.UIDynamicElement-1761583001001]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1761583001003]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSetStart [ngx.components.UIDynamicElement-1761583001005]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:start"}'
      tagName: ion-buttons
      ↓BackButton [ngx.components.UIDynamicElement-1761583001007]: 
        beanData: '{"ionBean":"BackButton"}'
        tagName: ion-back-button
      ↓MenuButton [ngx.components.UIDynamicElement-1761583001009]: 
        beanData: '{"ionBean":"MenuButton"}'
        tagName: ion-menu-button
    ↓BarTitle [ngx.components.UIDynamicElement-1761583001011]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓Text [ngx.components.UIText-1761583001013]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: 'script:this.global.selectedThread && this.global.selectedThread.name ? this.global.selectedThread.name : ''Thread details'''
    ↓ButtonSetEnd [ngx.components.UIDynamicElement-1761583001015]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Button [ngx.components.UIDynamicElement-1761583001017]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓Icon [ngx.components.UIDynamicElement-1761583001019]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:refresh"}'
          tagName: ion-icon
        ↓Event [ngx.components.UIControlEvent-1761583001021]: 
          ↓RefreshDetails [ngx.components.UIDynamicAction-1761584002001]: 
            beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:ConvertigoMonitor.ThreadDetails"}'
            ↓threadId [ngx.components.UIControlVariable-1761584002003]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:this.global.selectedThread && this.global.selectedThread.id != null ? this.global.selectedThread.id : null'
            ↓StoreDetails [ngx.components.UICustomAsyncAction-1761584002005]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'try {
                          var detail = props.out && props.out.detail ? props.out.detail : null;
                          page.global.threadDetails = detail;
                      } catch (refreshErr) {
                          page.c8o.log.warn(''[MB] Refresh thread detail error'', refreshErr);
                      } finally {
                          return;
                      }'
          ↓Publish [ngx.components.UIDynamicAction-1761584002007]: 
            beanData: '{"ionBean":"PublishEventAction","topic":"plain:refreshThreads"}'
↓Content [ngx.components.UIDynamicElement-1761583001025]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓DirectiveThread [ngx.components.UIControlDirective-1761583001027]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:this.global.selectedThread
    ↓CardSummary [ngx.components.UIDynamicElement-1761583001029]: 
      beanData: '{"ionBean":"Card"}'
      tagName: ion-card
      ↓CardHeader [ngx.components.UIDynamicElement-1761583001031]: 
        beanData: '{"ionBean":"CardHeader"}'
        tagName: ion-card-header
        ↓CardTitle [ngx.components.UIDynamicElement-1761583001033]: 
          beanData: '{"ionBean":"CardTitle"}'
          tagName: ion-card-title
          ↓Text [ngx.components.UIText-1761583001035]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.global.selectedThread && this.global.selectedThread.name ? this.global.selectedThread.name : ''Thread #'' + (this.global.selectedThread && this.global.selectedThread.id != null ? this.global.selectedThread.id : ''n/a'')'
        ↓CardSubTitle [ngx.components.UIDynamicElement-1761583001037]: 
          beanData: '{"ionBean":"CardSubTitle"}'
          tagName: ion-card-subtitle
          ↓Text [ngx.components.UIText-1761583001039]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:''ID '' + (this.global.selectedThread && this.global.selectedThread.id != null ? this.formatCount(this.global.selectedThread.id) : ''n/a'') + '' · '' + (this.global.selectedThread && this.global.selectedThread.daemon ? ''Daemon'' : ''User'') + '' thread'''
      ↓CardContent [ngx.components.UIDynamicElement-1761583001041]: 
        beanData: '{"ionBean":"CardContent"}'
        tagName: ion-card-content
        ↓TagState [ngx.components.UIElement-1761583001043]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001045]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'State · ' + this.detailField('state', this.currentThread() && this.currentThread().state || 'unknown')
        ↓TagCPU [ngx.components.UIElement-1761583001047]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001049]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'CPU ' + this.formatMillis(this.detailField('cpuTimeMillis', this.currentThread() && this.currentThread().cpuTimeMillis)) + ' · User ' + this.formatMillis(this.detailField('userTimeMillis', this.currentThread() && this.currentThread().userTimeMillis))
        ↓TagCounts [ngx.components.UIElement-1761583001051]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001053]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'Blocked ' + this.formatCount(this.detailField('blockedCount', this.currentThread() && this.currentThread().blockedCount)) + ' · Waited ' + this.formatCount(this.detailField('waitedCount', this.currentThread() && this.currentThread().waitedCount))
        ↓TagTimes [ngx.components.UIElement-1761583001055]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001057]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'Waited ' + this.formatMillis(this.detailField('waitedTimeMillis', this.currentThread() && this.currentThread().waitedTimeMillis)) + ' · Blocked ' + this.formatMillis(this.detailField('blockedTimeMillis', this.currentThread() && this.currentThread().blockedTimeMillis))
        ↓TagLock [ngx.components.UIElement-1761583001059]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001061]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'Lock · ' + this.formatLock(this.detailField('lockName', this.currentThread() && this.currentThread().lockName))
        ↓TagOwner [ngx.components.UIElement-1761583001063]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001065]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'Owner · ' + this.formatLock(this.detailField('lockOwnerName', this.currentThread() && this.currentThread().lockOwnerName))
        ↓Badges [ngx.components.UIControlDirective-1762012000313]: 
          directiveExpression: let badge of this.summaryBadges()
          directiveIndexName: badgeIdx
          directiveItemName: badge
          ↓Chip [ngx.components.UIDynamicElement-1762012000315]: 
            beanData: '{"ionBean":"Chip"}'
            tagName: ion-chip
            ↓AttrColor [ngx.components.UIAttribute-1762012000317]: 
              attrName: color
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:badge.color
            ↓Text [ngx.components.UIText-1762012000319]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:badge.label
        ↓TagSnapshot [ngx.components.UIElement-1761583001067]: 
          tagName: p
          ↓Text [ngx.components.UIText-1761583001069]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:'Snapshot · ' + this.formatTimestamp(this.detailField('capturedAt', this.global.threadsSnapshot && this.global.threadsSnapshot.capturedAt))
        ↓DirectiveDetailError [ngx.components.UIControlDirective-1761584500131]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.detail() && this.detail().error
          ↓Note [ngx.components.UIDynamicElement-1761584500133]: 
            beanData: '{"ionBean":"Note"}'
            tagName: ion-note
            ↓Text [ngx.components.UIText-1761584500135]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'script:''Warning · '' + (this.detail().error && this.detail().error.message ? this.detail().error.message : ''Thread details unavailable'')'
    ↓CardStack [ngx.components.UIDynamicElement-1761583001071]: 
      beanData: '{"ionBean":"Card"}'
      tagName: ion-card
      ↓CardHeader [ngx.components.UIDynamicElement-1761583001073]: 
        beanData: '{"ionBean":"CardHeader"}'
        tagName: ion-card-header
        ↓CardTitle [ngx.components.UIDynamicElement-1761583001075]: 
          beanData: '{"ionBean":"CardTitle"}'
          tagName: ion-card-title
          ↓Text [ngx.components.UIText-1761583001077]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Stack trace
        ↓CardSubTitle [ngx.components.UIDynamicElement-1761583001079]: 
          beanData: '{"ionBean":"CardSubTitle"}'
          tagName: ion-card-subtitle
          ↓Text [ngx.components.UIText-1761583001081]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:this.stackFrames().length ? ''Frames · '' + this.stackFrames().length : ''No frames captured'''
        ↓HeaderButtons [ngx.components.UIElement-1762012000321]: 
          tagName: ion-buttons
          ↓AttrSlot [ngx.components.UIAttribute-1762012000323]: 
            attrName: slot
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:end
          ↓CopyButton [ngx.components.UIDynamicElement-1762012000325]: 
            beanData: '{"ionBean":"Button"}'
            tagName: ion-button
            ↓Icon [ngx.components.UIDynamicElement-1762012000327]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:copy"}'
              tagName: ion-icon
            ↓Event [ngx.components.UIControlEvent-1762012000329]: 
              ↓CopyAction [ngx.components.UICustomAction-1762012000331]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'try {
                            this.copyFullStack();
                        } finally {
                            resolve();
                        }'
      ↓CardContent [ngx.components.UIDynamicElement-1761583001083]: 
        beanData: '{"ionBean":"CardContent"}'
        tagName: ion-card-content
        ↓DirectiveLoading [ngx.components.UIControlDirective-1761584500137]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:!this.detail()
          ↓GenericItem [ngx.components.UIDynamicElement-1761584500139]: 
            beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
            tagName: ion-item
            ↓Label [ngx.components.UIDynamicElement-1761584500141]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓Text [ngx.components.UIText-1761584500143]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Loading thread details…
        ↓StackTextDirective [ngx.components.UIControlDirective-1762012000333]: 
          directiveName: If
          directiveSource: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.detail() && this.stackFrames().length
          ↓StackItem [ngx.components.UIDynamicElement-1762012000335]: 
            beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
            tagName: ion-item
            ↓Label [ngx.components.UIDynamicElement-1762012000337]: 
              beanData: '{"ionBean":"Label"}'
              tagName: ion-label
              ↓AttrClass [ngx.components.UIAttribute-1762012000339]: 
                attrName: class
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:threads-stack
              ↓Pre [ngx.components.UIElement-1762012000341]: 
                tagName: pre
                ↓AttrStyle [ngx.components.UIAttribute-1762012000343]: 
                  attrName: style
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'plain:white-space: pre-wrap; margin: 0;'
                ↓Text [ngx.components.UIText-1762012000345]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.stackAsText()
        ↓List [ngx.components.UIDynamicElement-1761583001085]: 
          beanData: '{"ionBean":"List"}'
          tagName: ion-list
          ↓DirectiveFrames [ngx.components.UIControlDirective-1761583001087]: 
            directiveExpression: 'let frame of this.stackFrames(); trackBy: trackFrame'
            directiveIndexName: idx
            directiveItemName: frame
            ↓ListItem [ngx.components.UIDynamicElement-1761583001089]: 
              beanData: '{"ionBean":"ListItem","Lines":"plain:full"}'
              tagName: ion-item
              ↓Label [ngx.components.UIDynamicElement-1761583001091]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1761583001093]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.formatFrame(frame)
              ↓DirectiveNative [ngx.components.UIControlDirective-1761583002109]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.isNativeFrame(frame)
                ↓Note [ngx.components.UIDynamicElement-1761583002111]: 
                  beanData: '{"ionBean":"Note"}'
                  tagName: ion-note
                  ↓Attr [ngx.components.UIAttribute-1761583002113]: 
                    attrName: slot
                    attrValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:end
                  ↓Text [ngx.components.UIText-1761583002115]: 
                    textValue: 
                      - xmlizable: 
                        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                        - MobileSmartSourceType: plain:native
          ↓DirectiveNoFrames [ngx.components.UIControlDirective-1761583001101]: 
            directiveName: If
            directiveSource: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.detail() && !this.stackFrames().length
            ↓GenericItem [ngx.components.UIDynamicElement-1761583001103]: 
              beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
              tagName: ion-item
              ↓Label [ngx.components.UIDynamicElement-1761583001105]: 
                beanData: '{"ionBean":"Label"}'
                tagName: ion-label
                ↓Text [ngx.components.UIText-1761583001107]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: plain:No stack frames captured.
  ↓DirectiveMissing [ngx.components.UIControlDirective-1761583001109]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.global.selectedThread
    ↓GenericItem [ngx.components.UIDynamicElement-1761583001111]: 
      beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
      tagName: ion-item
      ↓Label [ngx.components.UIDynamicElement-1761583001113]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1761583001115]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Select a thread from the list to inspect its details.