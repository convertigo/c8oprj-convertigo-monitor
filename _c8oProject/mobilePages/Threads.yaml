comment: Threads snapshot view
scriptContent: 
  - xmlizable: 
    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
    - com.twinsoft.convertigo.beans.common.FormatedContent: 
      →: |
        '/*Begin_c8o_PageImport*/
        /*End_c8o_PageImport*/
        /*Begin_c8o_PageDeclaration*/
        	/*End_c8o_PageDeclaration*/
        /*Begin_c8o_PageConstructor*/
        	/*End_c8o_PageConstructor*/
        /*Begin_c8o_PageFunction*/
        	public formatCount(value: any) {
        		if (value === null || value === undefined) { return "n/a"; }
        		try { return Number(value).toLocaleString(); } catch (e) { return String(value); }
        	}
        	public formatMillis(value: any) {
        		if (value === null || value === undefined) { return "n/a"; }
        		const n = Number(value);
        		if (Number.isNaN(n)) { return String(value); }
        		if (n >= 60000) { return (n / 60000).toFixed(1) + " min"; }
        		if (n >= 1000) { return (n / 1000).toFixed(1) + " s"; }
        		return n + " ms";
        	}
        	public formatTimestamp(value: any) {
        		if (!value) { return "n/a"; }
        		try { const d = new Date(value); return isNaN(d.getTime()) ? String(value) : d.toLocaleString(); } catch (e) { return String(value); }
        	}
        	public truncateSample(sample: any, maxLength: number = 160) {
        		if (!sample) { return ""; }
        		const txt = String(sample);
        		return txt.length > maxLength ? txt.slice(0, maxLength) + "…" : txt;
        	}
        public trackThread(index: number, thread: any) {
        		return (thread && thread.id != null) ? thread.id : index;
        	}
        	public sortMode = "cpu";
        	public snapshot(): any {
        		return (this.global && this.global.threadsSnapshot) ? this.global.threadsSnapshot : {};
        	}
        	public snapshotNumber(key: string): number {
        		const snap = this.snapshot();
        		if (snap && typeof snap[key] !== "undefined" && snap[key] !== null) {
        			return Number(snap[key]);
        		}
        		return 0;
        	}
        	public stateEntries(): any[] {
        		const states = this.snapshot().states || {};
        		const labels: any = {
        			"RUNNABLE": "Runnable",
        			"WAITING": "Waiting",
        			"TIMED_WAITING": "Timed waiting",
        			"BLOCKED": "Blocked",
        			"NEW": "New",
        			"TERMINATED": "Terminated"
        		};
        		return Object.keys(labels).map((key) => ({
        			key,
        			label: labels[key],
        			value: Number(states && typeof states[key] !== "undefined" ? states[key] : 0)
        		}));
        	}
        	public sortOptions() {
        		return [
        			{ value: "cpu", label: "Top CPU" },
        			{ value: "wait", label: "Top waits" },
        			{ value: "blocked", label: "Top blocked" },
        			{ value: "name", label: "Name A→Z" }
        		];
        	}
        	public setSortMode(mode: string): void {
        		if (!mode) {
        			return;
        		}
        		this.sortMode = mode;
        	}
        	public threadCollection(): any[] {
        		const snapshot = this.snapshot();
        		const threads = snapshot && snapshot.threads ? snapshot.threads : [];
        		return Array.isArray(threads) ? threads : [];
        	}
        	public sortedThreads(): any[] {
        		const list = this.threadCollection().slice();
        		const mode = this.sortMode || "cpu";
        		const sortNumber = (key: string) => {
        			list.sort((a: any, b: any) => {
        				const av = Number(a && typeof a[key] !== "undefined" && a[key] !== null ? a[key] : 0);
        				const bv = Number(b && typeof b[key] !== "undefined" && b[key] !== null ? b[key] : 0);
        				if (av === bv) {
        					return (a && a.id != null ? a.id : 0) - (b && b.id != null ? b.id : 0);
        				}
        				return bv - av;
        			});
        		};
        		switch (mode) {
        			case "wait":
        				sortNumber("waitedTimeMillis");
        				break;
        			case "blocked":
        				sortNumber("blockedTimeMillis");
        				break;
        			case "name":
        				list.sort((a: any, b: any) => {
        					const an = (a && a.name ? a.name : "").toLowerCase();
        					const bn = (b && b.name ? b.name : "").toLowerCase();
        					if (an === bn) {
        						return (a && a.id != null ? a.id : 0) - (b && b.id != null ? b.id : 0);
        					}
        					return an > bn ? 1 : -1;
        				});
        				break;
        			default:
        				sortNumber("cpuTimeMillis");
        				break;
        		}
        		return list;
        	}
        	public topCpuThreads(): any[] {
        		const snapshot = this.snapshot();
        		const list = snapshot && Array.isArray(snapshot.topCpuThreads) ? snapshot.topCpuThreads : [];
        		return list.map((entry: any) => entry && entry.thread ? entry.thread : entry);
        	}
        	public topWaitThreads(): any[] {
        		const snapshot = this.snapshot();
        		const list = snapshot && Array.isArray(snapshot.topWaitedThreads) ? snapshot.topWaitedThreads : [];
        		return list.map((entry: any) => entry && entry.thread ? entry.thread : entry);
        	}
        	public topBlockedThreads(): any[] {
        		const snapshot = this.snapshot();
        		const list = snapshot && Array.isArray(snapshot.topBlockedThreads) ? snapshot.topBlockedThreads : [];
        		return list.map((entry: any) => entry && entry.thread ? entry.thread : entry);
        	}
        	public colorForState(state: string): string {
        		switch (state) {
        			case "RUNNABLE":
        				return "success";
        			case "WAITING":
        				return "tertiary";
        			case "TIMED_WAITING":
        				return "warning";
        			case "BLOCKED":
        				return "danger";
        			case "TERMINATED":
        				return "medium";
        			default:
        				return "medium";
        		}
        	}
        	public threadHeaderColor(thread: any): string {
        		if (thread && thread.deadlocked) {
        			return "danger";
        		}
        		return this.colorForState(thread && thread.state ? thread.state : "");
        	}
        	public threadTitle(thread: any): string {
        		if (thread && thread.name) {
        			return String(thread.name);
        		}
        		if (thread && thread.id != null) {
        			return "Thread #" + thread.id;
        		}
        		return "Unknown thread";
        	}
        	public threadSubtitle(thread: any): string {
        		const state = thread && thread.state ? thread.state : "unknown";
        		const cpu = this.formatMillis(thread && thread.cpuTimeMillis);
        		const wait = this.formatMillis(thread && thread.waitedTimeMillis);
        		return "State · " + state + " · CPU " + cpu + " · Waited " + wait;
        	}
        	public threadBadges(thread: any): any[] {
        		if (!thread) {
        			return [];
        		}
        		const badges: any[] = [];
        		if (thread.deadlocked) {
        			badges.push({ label: "Deadlocked", color: "danger" });
        		}
        		if (thread.daemon) {
        			badges.push({ label: "Daemon", color: "medium" });
        		}
        		if (thread.suspended) {
        			badges.push({ label: "Suspended", color: "warning" });
        		}
        		if (thread.inNative) {
        			badges.push({ label: "Native", color: "tertiary" });
        		}
        		return badges;
        	}
        public heatmapMode = "cpu";
        public latestHeatmapMax = 0;
        	public heatmapMetrics(): Array<{ key: string; label: string; mode: string; }> {
        		return [
        			{ key: "cpuTimeMillis", label: "CPU time", mode: "cpu" },
        			{ key: "waitedTimeMillis", label: "Wait time", mode: "wait" },
        			{ key: "blockedTimeMillis", label: "Blocked time", mode: "blocked" }
        		];
        	}
        	public heatmapOptions(): Array<{ value: string; label: string; description: string; }> {
        		return [
        			{ value: "cpu", label: "Top CPU", description: "Threads using the most CPU time" },
        			{ value: "wait", label: "Top waits", description: "Threads spending the longest time waiting" },
        			{ value: "blocked", label: "Top blocked", description: "Threads blocked for the longest time" }
        		];
        	}
        	public setHeatmapMode(mode: string): void {
        		if (!mode || mode === this.heatmapMode) {
        			return;
        		}
        		this.heatmapMode = mode;
        		this._heatmapDescription = null;
        	}
        	private _heatmapDescription: string | null = null;
        	private _heatmapDescriptionMode: string | null = null;
        	public heatmapDescription(): string {
        		if (this._heatmapDescription && this._heatmapDescriptionMode === this.heatmapMode) {
        			return this._heatmapDescription;
        		}
        		const option = this.heatmapOptions().find((entry) => entry.value === this.heatmapMode);
        		this._heatmapDescriptionMode = this.heatmapMode;
        		this._heatmapDescription = option ? option.description : "CPU usage";
        		return this._heatmapDescription;
        	}
        	public refreshRateValue(): string {
        		const delay = Number(this.global && this.global.refreshThreads);
        		if (!delay || delay <= 0) {
        			return "--";
        		}
        		if (delay >= 1000) {
        			const seconds = delay / 1000;
        			return seconds % 1 === 0 ? seconds.toFixed(0) + " s" : seconds.toFixed(1) + " s";
        		}
        		return delay.toFixed(0) + " ms";
        	}
        	public refreshRateLabel(): string {
        		const delay = Number(this.global && this.global.refreshThreads);
        		return delay > 0 ? "Auto refresh enabled" : "Refresh cadence unavailable";
        	}
        	public formatLastUpdateLabel(): string {
        		const snapshot = this.snapshot();
        		const captured = snapshot && snapshot.capturedAt;
        		if (!captured) {
        			return "Last update · awaiting data";
        		}
        		const formatted = this.formatTimestamp(captured);
        		if (!formatted || formatted === "n/a") {
        			return "Last update · awaiting data";
        		}
        		return "Last update · " + formatted;
        	}
        	public heatmapThreadCandidates(limit: number = 8): Array<{ thread: any; label: string; values: Record<string, number>; score: number; }> {
        		const metrics = this.heatmapMetrics();
        		if (!metrics.length) {
        			return [];
        		}
        		const selected = metrics.find((metric) => metric.mode === this.heatmapMode) || metrics[0];
        		const byId = new Map<number, any>();
        		const allThreads = this.threadCollection();
        		for (const thread of allThreads) {
        			if (thread && thread.id != null) {
        				byId.set(Number(thread.id), thread);
        			}
        		}
        		const seen = new Set<string>();
        		const results: Array<{ thread: any; label: string; values: Record<string, number>; score: number; }> = [];
        		const register = (source: any) => {
        			if (!source) {
        				return;
        			}
        			const candidate = source && source.id != null ? byId.get(Number(source.id)) || source : source;
        			const key = candidate && candidate.id != null ? "id:" + candidate.id : (candidate && candidate.name ? "name:" + candidate.name : null);
        			if (key && seen.has(key)) {
        				return;
        			}
        			const values: Record<string, number> = {};
        			let score = 0;
        			for (const metric of metrics) {
        				const raw = Number(candidate && typeof candidate[metric.key] !== "undefined" && candidate[metric.key] !== null ? candidate[metric.key] : 0);
        				const value = Number.isFinite(raw) && raw > 0 ? raw : 0;
        				values[metric.key] = value;
        				if (value > score) {
        					score = value;
        				}
        			}
        			if (score <= 0) {
        				return;
        			}
        			if (key) {
        				seen.add(key);
        			}
        			results.push({
        				thread: candidate,
        				label: this.threadTitle(candidate),
        				values,
        				score
        			});
        		};
        		const topCpu = this.topCpuThreads();
        		const topWait = this.topWaitThreads();
        		const topBlocked = this.topBlockedThreads();
        		const seedLists: Array<any[]> = [];
        		if (selected.mode === "cpu") {
        			if (topCpu.length) { seedLists.push(topCpu); }
        		} else if (selected.mode === "wait") {
        			if (topWait.length) { seedLists.push(topWait); }
        		} else if (selected.mode === "blocked") {
        			if (topBlocked.length) { seedLists.push(topBlocked); }
        		}
        		if (selected.mode !== "cpu" && topCpu.length) { seedLists.push(topCpu); }
        		if (selected.mode !== "wait" && topWait.length) { seedLists.push(topWait); }
        		if (selected.mode !== "blocked" && topBlocked.length) { seedLists.push(topBlocked); }
        		for (const seed of seedLists) {
        			for (const thread of seed) {
        				register(thread);
        			}
        		}
        		if (results.length < limit) {
        			for (const thread of allThreads) {
        				register(thread);
        				if (results.length >= limit) {
        					break;
        				}
        			}
        		}
        		results.sort((a, b) => {
        			if (b.score === a.score) {
        				return a.label.localeCompare(b.label);
        			}
        			return b.score - a.score;
        		});
        		return results.slice(0, limit);
        	}
        public threadHeatmapSeries(): any[] {
        		const metrics = this.heatmapMetrics();
        		const threads = this.heatmapThreadCandidates();
        		if (!metrics.length || !threads.length) {
        			this.latestHeatmapMax = 0;
        			return [];
        		}
        		const selected = metrics.find((metric) => metric.mode === this.heatmapMode) || metrics[0];
        		let maxValue = 0;
        		const data = threads.map((entry) => {
        			const value = entry.values[selected.key];
        			if (typeof value === "number" && value > maxValue) {
        				maxValue = value;
        			}
        			return { x: entry.label, y: value };
        		});
        		this.latestHeatmapMax = maxValue;
        		return [{
         			name: selected.label,
         			data
        		}];
        	}
        	public heatmapPlotOptions(): any {
        		return {
        			heatmap: {
        				shadeIntensity: 0.15,
        				radius: 4,
        				useFillColorAsStroke: false,
        				colorScale: {
        					ranges: this.heatmapColorRanges()
        				}
        			}
        		};
        	}
        	public heatmapColorRanges(): any[] {
        		const max = this.latestHeatmapMax > 0 ? this.latestHeatmapMax : 1;
        		const step = Math.max(max / 5, 1);
        		const colors = ["#fff9c4", "#ffe082", "#ffc107", "#ff7043", "#c62828"];
        		const ranges: any[] = [];
        		for (let i = 0; i < colors.length; i++) {
        			const from = i * step;
        			if (from > max) {
        				break;
        			}
        			const to = i === colors.length - 1 ? max : Math.min(max, (i + 1) * step);
        			ranges.push({ from, to, color: colors[i] });
        		}
        		return ranges;
        	}
        	public hasThreadHeatmap(): boolean {
        		const series = this.threadHeatmapSeries();
        		return series.some((entry) => entry && Array.isArray(entry.data) && entry.data.some((point: any) => typeof point?.y === "number" && point.y > 0));
        	}
        	public threadHeatmapSubtitle(): string {
        		const metrics = this.heatmapMetrics();
        		const selected = metrics.find((metric) => metric.mode === this.heatmapMode) || metrics[0];
        		const threads = this.heatmapThreadCandidates();
        		return threads.length ? threads.length + " threads · " + selected.label : "Waiting for " + selected.label.toLowerCase();
        	}
        	public formatHeatmapTooltip = (value: number): string => {
        		return this.formatMillis(value);
        	};
        	public stackPreviewText(thread: any): string {
        		if (!thread) {
        			return "No stack sample available.";
        		}
        		if (thread.stackPreview) {
        			return String(thread.stackPreview);
        		}
        		if (thread.stackSample) {
        			return String(thread.stackSample);
        		}
        		return "No stack sample available.";
        	}
        	public copyStackPreview(thread: any): void {
        		const text = this.stackPreviewText(thread);
        		if (!text) {
        			return;
        		}
        		try {
        			if (typeof navigator !== "undefined" && navigator.clipboard && navigator.clipboard.writeText) {
        				navigator.clipboard.writeText(text);
        			}
        		} catch (error) {
        			if (this.c8o && this.c8o.log && this.c8o.log.warn) {
        				this.c8o.log.warn("[Threads] copyStackPreview failed", error);
        			}
        		}
        	}
        	public themePreferenceValue(): string {
        		return this.global && this.global.themePreference ? this.global.themePreference : "system";
        	}
        	public themeResolvedValue(): string {
        		return this.global && this.global.themeResolved ? this.global.themeResolved : "light";
        	}
        	public themeIcon(): string {
        		const preference = this.themePreferenceValue();
        		if (preference === "light") {
        			return "sunny";
        		}
        		if (preference === "dark") {
        			return "moon";
        		}
        		return this.themeResolvedValue() === "dark" ? "contrast" : "contrast-outline";
        	}
        	public themeTooltip(): string {
        		const preference = this.themePreferenceValue();
        		if (preference === "light") {
        			return "Theme · Light";
        		}
        		if (preference === "dark") {
        			return "Theme · Dark";
        		}
        		return "Theme · System (" + this.themeResolvedValue() + ")";
        	}
        	public cycleThemePreference(): void {
        		if (typeof window !== "undefined" && (window as any).convertigoTheme && typeof (window as any).convertigoTheme.cycle === "function") {
        			(window as any).convertigoTheme.cycle();
        		}
        	}
        	/*End_c8o_PageFunction*/
        '
segment: threads
title: Threads
↓Header [ngx.components.UIDynamicElement-1761575995349]: 
  beanData: '{"ionBean":"Header"}'
  tagName: ion-header
  ↓ToolBar [ngx.components.UIDynamicElement-1761575995351]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓ButtonSet [ngx.components.UIDynamicElement-1761575995353]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:start"}'
      tagName: ion-buttons
      ↓MenuButton [ngx.components.UIDynamicElement-1761575995355]: 
        beanData: '{"ionBean":"MenuButton"}'
        tagName: ion-menu-button
    ↓BarTitle [ngx.components.UIDynamicElement-1761575995361]: 
      beanData: '{"ionBean":"BarTitle"}'
      tagName: ion-title
      ↓Text [ngx.components.UIText-1761575995363]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:Threads
    ↓ButtonSet1 [ngx.components.UIDynamicElement-1761575995365]: 
      beanData: '{"ionBean":"ButtonSet","SetPosition":"plain:end"}'
      tagName: ion-buttons
      ↓Button [ngx.components.UIDynamicElement-1761575995367]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓Icon [ngx.components.UIDynamicElement-1761575995369]: 
          beanData: '{"ionBean":"Icon","IconName":"plain:refresh"}'
          tagName: ion-icon
        ↓Event [ngx.components.UIControlEvent-1761575995371]: 
          eventName: (click)
          ↓PublishEvent [ngx.components.UIDynamicAction-1761575995373]: 
            beanData: '{"ionBean":"PublishEventAction","topic":"plain:refreshThreads"}'
      ↓ThemeButton [ngx.components.UIDynamicElement-1762017202001]: 
        beanData: '{"ionBean":"Button"}'
        tagName: ion-button
        ↓AttrTitle [ngx.components.UIAttribute-1762017202003]: 
          attrName: title
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.themeTooltip()
        ↓Icon [ngx.components.UIDynamicElement-1762017202005]: 
          beanData: '{"ionBean":"Icon","IconName":"script:this.themeIcon()"}'
          tagName: ion-icon
        ↓Event [ngx.components.UIControlEvent-1762017202007]: 
          eventName: (click)
          ↓ToggleTheme [ngx.components.UICustomAction-1762017202009]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    'try {
                        this.cycleThemePreference();
                    } finally {
                        resolve();
                    }'
↓Content [ngx.components.UIDynamicElement-1761575995375]: 
  beanData: '{"ionBean":"Content"}'
  tagName: ion-content
  ↓SummaryCard [ngx.components.UIDynamicElement-1762012000001]: 
    beanData: '{"ionBean":"Card"}'
    tagName: ion-card
    ↓CardHeader [ngx.components.UIDynamicElement-1762012000003]: 
      beanData: '{"ionBean":"CardHeader"}'
      tagName: ion-card-header
      ↓CardTitle [ngx.components.UIDynamicElement-1762012000005]: 
        beanData: '{"ionBean":"CardTitle"}'
        tagName: ion-card-title
        ↓Text [ngx.components.UIText-1762012000007]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Threads overview
      ↓CardSubTitle [ngx.components.UIDynamicElement-1762012000009]: 
        beanData: '{"ionBean":"CardSubTitle"}'
        tagName: ion-card-subtitle
        ↓Text [ngx.components.UIText-1762012000011]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:'Snapshot · ' + this.formatTimestamp(this.snapshot().capturedAt)
    ↓CardContent [ngx.components.UIDynamicElement-1762012000013]: 
      beanData: '{"ionBean":"CardContent"}'
      tagName: ion-card-content
      ↓Grid [ngx.components.UIElement-1762012000015]: 
        tagName: ion-grid
        ↓RowPrimary [ngx.components.UIElement-1762012000017]: 
          tagName: ion-row
          ↓TotalCol [ngx.components.UIElement-1762012000019]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000021]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:6
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000023]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:3
            ↓Label [ngx.components.UIDynamicElement-1762012000025]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000027]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Total threads
            ↓Value [ngx.components.UIElement-1762012000029]: 
              tagName: h2
              ↓Text [ngx.components.UIText-1762012000031]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.formatCount(this.snapshotNumber("totalThreads"))
          ↓MatchedCol [ngx.components.UIElement-1762012000033]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000035]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:6
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000037]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:3
            ↓Label [ngx.components.UIDynamicElement-1762012000039]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000041]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Matched threads
            ↓Value [ngx.components.UIElement-1762012000043]: 
              tagName: h2
              ↓Text [ngx.components.UIText-1762012000045]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.formatCount(this.snapshotNumber("matchedThreads"))
          ↓DaemonCol [ngx.components.UIElement-1762012000047]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000049]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:6
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000051]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:3
            ↓Label [ngx.components.UIDynamicElement-1762012000053]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000055]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Daemon threads
            ↓Value [ngx.components.UIElement-1762012000057]: 
              tagName: h2
              ↓Text [ngx.components.UIText-1762012000059]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.formatCount(this.snapshotNumber("daemonThreads"))
          ↓DeadlockedCol [ngx.components.UIElement-1762012000061]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000063]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:6
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000065]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:3
            ↓Label [ngx.components.UIDynamicElement-1762012000067]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000069]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Deadlocked
            ↓Value [ngx.components.UIElement-1762012000071]: 
              tagName: h2
              ↓Text [ngx.components.UIText-1762012000073]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:this.formatCount(this.snapshotNumber("deadlockedThreads"))
        ↓RowStates [ngx.components.UIElement-1762012000075]: 
          tagName: ion-row
          ↓StatesDirective [ngx.components.UIControlDirective-1762012000077]: 
            directiveExpression: let state of this.stateEntries()
            directiveIndexName: sIdx
            directiveItemName: state
            ↓StateCol [ngx.components.UIElement-1762012000079]: 
              tagName: ion-col
              ↓AttrSize [ngx.components.UIAttribute-1762012000081]: 
                attrName: size
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:6
              ↓AttrSizeMd [ngx.components.UIAttribute-1762012000083]: 
                attrName: size-md
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:2
              ↓Chip [ngx.components.UIDynamicElement-1762012000085]: 
                beanData: '{"ionBean":"Chip"}'
                tagName: ion-chip
                ↓AttrColor [ngx.components.UIAttribute-1762012000087]: 
                  attrName: color
                  attrValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:this.colorForState(state.key)
                ↓Text [ngx.components.UIText-1762012000089]: 
                  textValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: script:state.label + ' · ' + this.formatCount(state.value)
        ↓FilterRow [ngx.components.UIElement-1762012000091]: 
          tagName: ion-row
          ↓FilterCol [ngx.components.UIElement-1762012000093]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000095]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:12
            ↓Chip [ngx.components.UIDynamicElement-1762012000097]: 
              beanData: '{"ionBean":"Chip"}'
              tagName: ion-chip
              ↓AttrColor [ngx.components.UIAttribute-1762012000099]: 
                attrName: color
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:(this.snapshot().filter && this.snapshot().filter.applied) ? ''primary'' : ''medium'''
              ↓Text [ngx.components.UIText-1762012000101]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: 'script:(this.snapshot().filter && this.snapshot().filter.applied ? ''Filter · '' + (this.snapshot().filter.pattern || this.snapshot().filter.input || ''(regex)'') : ''Filter inactive'')'
  ↓HeatmapCard [ngx.components.UIDynamicElement-1762012500001]: 
    beanData: '{"ionBean":"Card"}'
    tagName: ion-card
    ↓CardHeader [ngx.components.UIDynamicElement-1762012500003]: 
      beanData: '{"ionBean":"CardHeader"}'
      tagName: ion-card-header
      ↓CardTitle [ngx.components.UIDynamicElement-1762012500005]: 
        beanData: '{"ionBean":"CardTitle"}'
        tagName: ion-card-title
        ↓Text [ngx.components.UIText-1762012500007]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Thread activity heatmap
      ↓CardSubTitle [ngx.components.UIDynamicElement-1762012500009]: 
        beanData: '{"ionBean":"CardSubTitle"}'
        tagName: ion-card-subtitle
        ↓Text [ngx.components.UIText-1762012500011]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.threadHeatmapSubtitle()
    ↓CardContent [ngx.components.UIDynamicElement-1762012500013]: 
      beanData: '{"ionBean":"CardContent"}'
      tagName: ion-card-content
      ↓ModeItem [ngx.components.UIDynamicElement-1762012600001]: 
        beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
        tagName: ion-item
        ↓Label [ngx.components.UIDynamicElement-1762012600003]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Title [ngx.components.UIElement-1762012600005]: 
            tagName: h3
            ↓Text [ngx.components.UIText-1762012600007]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:Metric focus
          ↓Description [ngx.components.UIElement-1762012600009]: 
            tagName: p
            ↓Text [ngx.components.UIText-1762012600011]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:"Highlight threads by " + this.heatmapDescription()
        ↓Segment [ngx.components.UIDynamicElement-1762012600013]: 
          beanData: '{"ionBean":"Segment"}'
          tagName: ion-segment
          ↓AttrScrollable [ngx.components.UIAttribute-1762012600015]: 
            attrName: scrollable
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:false
          ↓AttrValue [ngx.components.UIAttribute-1762012600017]: 
            attrName: value
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.heatmapMode
          ↓Event [ngx.components.UIControlEvent-1762012600019]: 
            attrName: (ionChange)
            eventName: ionChange
            ↓SetHeatmap [ngx.components.UICustomAction-1762012600021]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'try {
                          var mode = event && event.detail ? event.detail.value : null;
                          if (mode) {
                              this.setHeatmapMode(mode);
                          }
                      } finally {
                          resolve();
                      }'
          ↓OptionsDirective [ngx.components.UIControlDirective-1762012600023]: 
            directiveExpression: let option of this.heatmapOptions()
            directiveIndexName: heatIdx
            directiveItemName: option
            ↓Button [ngx.components.UIDynamicElement-1762012600025]: 
              beanData: '{"ionBean":"SegmentButton"}'
              tagName: ion-segment-button
              ↓AttrValue [ngx.components.UIAttribute-1762012600027]: 
                attrName: value
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:option.value
              ↓Text [ngx.components.UIText-1762012600029]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:option.label
      ↓DirectiveHeatmap [ngx.components.UIControlDirective-1762012500015]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.hasThreadHeatmap()
        ↓UseSharedHeatmap [ngx.components.UIUseShared-1762012500017]: 
          identifier: threadHeatmap
          sharedcomponent: libApexCharts.Application.NgxApp.apxChart
          ↓chart [ngx.components.UIUseVariable-1762012500019]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:{ type: ''heatmap'', height: 350, toolbar: { show: false }, animations: { enabled: false } }'
          ↓annotations [ngx.components.UIUseVariable-1762012500021]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓colors [ngx.components.UIUseVariable-1762012500023]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓dataLabels [ngx.components.UIUseVariable-1762012500025]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:{ enabled: false }'
          ↓series [ngx.components.UIUseVariable-1762012500027]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.threadHeatmapSeries()
          ↓stroke [ngx.components.UIUseVariable-1762012500029]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓labels [ngx.components.UIUseVariable-1762012500031]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓legend [ngx.components.UIUseVariable-1762012500033]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:{ position: ''top'' }'
          ↓fill [ngx.components.UIUseVariable-1762012500035]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓tooltip [ngx.components.UIUseVariable-1762012500037]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:{ y: { formatter: this.formatHeatmapTooltip } }'
          ↓plotOptions [ngx.components.UIUseVariable-1762012500039]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.heatmapPlotOptions()
          ↓responsive [ngx.components.UIUseVariable-1762012500041]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓xaxis [ngx.components.UIUseVariable-1762012500043]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:{ labels: { rotate: -45, trim: false } }'
          ↓yaxis [ngx.components.UIUseVariable-1762012500045]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓grid [ngx.components.UIUseVariable-1762012500047]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: 'script:{ strokeDashArray: 2, borderColor: ''#e9ecef'', padding: { right: 10 } }'
          ↓states [ngx.components.UIUseVariable-1762012500049]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓title [ngx.components.UIUseVariable-1762012500051]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓subtitle [ngx.components.UIUseVariable-1762012500053]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
          ↓theme [ngx.components.UIUseVariable-1762012500055]: 
            varValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:null
      ↓DirectiveHeatmapEmpty [ngx.components.UIControlDirective-1762012500057]: 
        directiveName: If
        directiveSource: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:!this.hasThreadHeatmap()
        ↓Placeholder [ngx.components.UIDynamicElement-1762012500059]: 
          beanData: '{"ionBean":"TextItem"}'
          tagName: ion-text
          ↓AttrColor [ngx.components.UIAttribute-1762012500061]: 
            attrName: color
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:medium
          ↓Text [ngx.components.UIText-1762012500063]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:No timing data available yet.
  ↓HotCard [ngx.components.UIDynamicElement-1762012000103]: 
    beanData: '{"ionBean":"Card"}'
    tagName: ion-card
    ↓CardHeader [ngx.components.UIDynamicElement-1762012000105]: 
      beanData: '{"ionBean":"CardHeader"}'
      tagName: ion-card-header
      ↓CardTitle [ngx.components.UIDynamicElement-1762012000107]: 
        beanData: '{"ionBean":"CardTitle"}'
        tagName: ion-card-title
        ↓Text [ngx.components.UIText-1762012000109]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Hot spots
      ↓CardSubTitle [ngx.components.UIDynamicElement-1762012000111]: 
        beanData: '{"ionBean":"CardSubTitle"}'
        tagName: ion-card-subtitle
        ↓Text [ngx.components.UIText-1762012000113]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:Top resource consumers
    ↓CardContent [ngx.components.UIDynamicElement-1762012000115]: 
      beanData: '{"ionBean":"CardContent"}'
      tagName: ion-card-content
      ↓Grid [ngx.components.UIElement-1762012000117]: 
        tagName: ion-grid
        ↓Row [ngx.components.UIElement-1762012000119]: 
          tagName: ion-row
          ↓CpuCol [ngx.components.UIElement-1762012000121]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000123]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:12
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000125]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:4
            ↓Title [ngx.components.UIDynamicElement-1762012000127]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000129]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Top CPU
            ↓List [ngx.components.UIDynamicElement-1762012000131]: 
              beanData: '{"ionBean":"List"}'
              tagName: ion-list
              ↓Directive [ngx.components.UIControlDirective-1762012000133]: 
                directiveExpression: let entry of this.topCpuThreads(); index as idx
                directiveIndexName: cIdx
                directiveItemName: entry
                ↓Item [ngx.components.UIDynamicElement-1762012000135]: 
                  beanData: '{"ionBean":"ListItem","Lines":"plain:inset"}'
                  tagName: ion-item
                  ↓Label [ngx.components.UIDynamicElement-1762012000137]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Header [ngx.components.UIElement-1762012000139]: 
                      tagName: h3
                      ↓Text [ngx.components.UIText-1762012000141]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'script:''#'' + (idx + 1) + '' · '' + (entry && entry.name ? entry.name : ''Thread #'' + (entry && entry.id != null ? entry.id : ''?''))'
                    ↓Summary [ngx.components.UIElement-1762012000143]: 
                      tagName: p
                      ↓Text [ngx.components.UIText-1762012000145]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:'CPU ' + this.formatMillis(entry && entry.cpuTimeMillis)
                  ↓StateBadge [ngx.components.UIDynamicElement-1762012000147]: 
                    beanData: '{"ionBean":"Badge"}'
                    tagName: ion-badge
                    ↓Text [ngx.components.UIText-1762012000149]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'script:entry && entry.state ? entry.state : ''Unknown'''
              ↓Placeholder [ngx.components.UIControlDirective-1762012000151]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:!this.topCpuThreads().length
                ↓Item [ngx.components.UIDynamicElement-1762012000153]: 
                  beanData: '{"ionBean":"ListItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓Label [ngx.components.UIDynamicElement-1762012000155]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1762012000157]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:CPU metrics unavailable.
          ↓WaitCol [ngx.components.UIElement-1762012000159]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000161]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:12
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000163]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:4
            ↓Title [ngx.components.UIDynamicElement-1762012000165]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000167]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Top waits
            ↓List [ngx.components.UIDynamicElement-1762012000169]: 
              beanData: '{"ionBean":"List"}'
              tagName: ion-list
              ↓Directive [ngx.components.UIControlDirective-1762012000171]: 
                directiveExpression: let entry of this.topWaitThreads(); index as idx
                directiveIndexName: wIdx
                directiveItemName: entry
                ↓Item [ngx.components.UIDynamicElement-1762012000173]: 
                  beanData: '{"ionBean":"ListItem","Lines":"plain:inset"}'
                  tagName: ion-item
                  ↓Label [ngx.components.UIDynamicElement-1762012000175]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Header [ngx.components.UIElement-1762012000177]: 
                      tagName: h3
                      ↓Text [ngx.components.UIText-1762012000179]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'script:''#'' + (idx + 1) + '' · '' + (entry && entry.name ? entry.name : ''Thread #'' + (entry && entry.id != null ? entry.id : ''?''))'
                    ↓Summary [ngx.components.UIElement-1762012000181]: 
                      tagName: p
                      ↓Text [ngx.components.UIText-1762012000183]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:'Waited ' + this.formatMillis(entry && entry.waitedTimeMillis)
                  ↓StateBadge [ngx.components.UIDynamicElement-1762012000185]: 
                    beanData: '{"ionBean":"Badge"}'
                    tagName: ion-badge
                    ↓Text [ngx.components.UIText-1762012000187]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'script:entry && entry.state ? entry.state : ''Unknown'''
              ↓Placeholder [ngx.components.UIControlDirective-1762012000189]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:!this.topWaitThreads().length
                ↓Item [ngx.components.UIDynamicElement-1762012000191]: 
                  beanData: '{"ionBean":"ListItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓Label [ngx.components.UIDynamicElement-1762012000193]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1762012000195]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:Wait metrics unavailable.
          ↓BlockedCol [ngx.components.UIElement-1762012000197]: 
            tagName: ion-col
            ↓AttrSize [ngx.components.UIAttribute-1762012000199]: 
              attrName: size
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:12
            ↓AttrSizeMd [ngx.components.UIAttribute-1762012000201]: 
              attrName: size-md
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: plain:4
            ↓Title [ngx.components.UIDynamicElement-1762012000203]: 
              beanData: '{"ionBean":"TextItem"}'
              tagName: ion-text
              ↓Text [ngx.components.UIText-1762012000205]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: plain:Top blocked
            ↓List [ngx.components.UIDynamicElement-1762012000207]: 
              beanData: '{"ionBean":"List"}'
              tagName: ion-list
              ↓Directive [ngx.components.UIControlDirective-1762012000209]: 
                directiveExpression: let entry of this.topBlockedThreads(); index as idx
                directiveIndexName: bIdx
                directiveItemName: entry
                ↓Item [ngx.components.UIDynamicElement-1762012000211]: 
                  beanData: '{"ionBean":"ListItem","Lines":"plain:inset"}'
                  tagName: ion-item
                  ↓Label [ngx.components.UIDynamicElement-1762012000213]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Header [ngx.components.UIElement-1762012000215]: 
                      tagName: h3
                      ↓Text [ngx.components.UIText-1762012000217]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: 'script:''#'' + (idx + 1) + '' · '' + (entry && entry.name ? entry.name : ''Thread #'' + (entry && entry.id != null ? entry.id : ''?''))'
                    ↓Summary [ngx.components.UIElement-1762012000219]: 
                      tagName: p
                      ↓Text [ngx.components.UIText-1762012000221]: 
                        textValue: 
                          - xmlizable: 
                            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                            - MobileSmartSourceType: script:'Blocked ' + this.formatMillis(entry && entry.blockedTimeMillis)
                  ↓StateBadge [ngx.components.UIDynamicElement-1762012000223]: 
                    beanData: '{"ionBean":"Badge"}'
                    tagName: ion-badge
                    ↓Text [ngx.components.UIText-1762012000225]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: 'script:entry && entry.state ? entry.state : ''Unknown'''
              ↓Placeholder [ngx.components.UIControlDirective-1762012000227]: 
                directiveName: If
                directiveSource: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:!this.topBlockedThreads().length
                ↓Item [ngx.components.UIDynamicElement-1762012000229]: 
                  beanData: '{"ionBean":"ListItem","Lines":"plain:none"}'
                  tagName: ion-item
                  ↓Label [ngx.components.UIDynamicElement-1762012000231]: 
                    beanData: '{"ionBean":"Label"}'
                    tagName: ion-label
                    ↓Text [ngx.components.UIText-1762012000233]: 
                      textValue: 
                        - xmlizable: 
                          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                          - MobileSmartSourceType: plain:Block metrics unavailable.
  ↓ControlsCard [ngx.components.UIDynamicElement-1762012000235]: 
    beanData: '{"ionBean":"Card"}'
    tagName: ion-card
    ↓CardContent [ngx.components.UIDynamicElement-1762012000237]: 
      beanData: '{"ionBean":"CardContent"}'
      tagName: ion-card-content
      ↓SearchItem [ngx.components.UIDynamicElement-1762012000239]: 
        beanData: '{"ionBean":"FormItem"}'
        tagName: ion-item
        ↓SearchBar [ngx.components.UIDynamicElement-1762012000241]: 
          beanData: |
            '{
             "ionBean": "Searchbar",
             "ControlName": "plain:threadsFilterSearch",
             "placeholder": "plain:Filter threads (regex)"
            }'
          tagName: ion-searchbar
          ↓Event [ngx.components.UIControlEvent-1762012000243]: 
            attrName: (ionChange)
            eventName: ionChange
            ↓SetGlobal [ngx.components.UIDynamicAction-1762012000245]: 
              beanData: |
                '{
                 "ionBean": "SetGlobalAction",
                 "Property": "plain:threadsFilter",
                 "Value": "script:(event && event.detail && event.detail.value ? event.detail.value.trim() : '''')"
                }'
            ↓PublishEvent [ngx.components.UIDynamicAction-1762012000247]: 
              beanData: '{"ionBean":"PublishEventAction","topic":"plain:refreshThreads"}'
      ↓SortItem [ngx.components.UIDynamicElement-1762012000249]: 
        beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
        tagName: ion-item
        ↓Label [ngx.components.UIDynamicElement-1762012000251]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Text [ngx.components.UIText-1762012000253]: 
            textValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:Sort threads
        ↓Segment [ngx.components.UIDynamicElement-1762012000255]: 
          beanData: '{"ionBean":"Segment"}'
          tagName: ion-segment
          ↓AttrValue [ngx.components.UIAttribute-1762012000257]: 
            attrName: value
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: script:this.sortMode
          ↓Event [ngx.components.UIControlEvent-1762012000259]: 
            attrName: (ionChange)
            eventName: ionChange
            ↓SetSort [ngx.components.UICustomAction-1762012000261]: 
              actionValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                  - com.twinsoft.convertigo.beans.common.FormatedContent: 
                    →: |
                      'try {
                          var mode = event && event.detail ? event.detail.value : null;
                          if (mode) {
                              this.setSortMode(mode);
                          }
                      } finally {
                          resolve();
                      }'
          ↓OptionsDirective [ngx.components.UIControlDirective-1762012000263]: 
            directiveExpression: let option of this.sortOptions()
            directiveIndexName: optIdx
            directiveItemName: option
            ↓Button [ngx.components.UIDynamicElement-1762012000265]: 
              beanData: '{"ionBean":"SegmentButton"}'
              tagName: ion-segment-button
              ↓AttrValue [ngx.components.UIAttribute-1762012000267]: 
                attrName: value
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:option.value
              ↓Text [ngx.components.UIText-1762012000269]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:option.label
  ↓ListContainer [ngx.components.UIDynamicElement-1761575995423]: 
    beanData: '{"ionBean":"List"}'
    tagName: ion-list
    ↓Directive [ngx.components.UIControlDirective-1761575995425]: 
      directiveExpression: 'let thread of this.sortedThreads(); index as idx; trackBy: trackThread'
      directiveIndexName: idx
      directiveItemName: thread
      ↓ListItem [ngx.components.UIDynamicElement-1761575995427]: 
        beanData: '{"ionBean":"ListItem","Lines":"plain:full"}'
        tagName: ion-item
        ↓Attr [ngx.components.UIAttribute-1761575995429]: 
          attrName: '[color]'
          attrValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: script:this.threadHeaderColor(thread)
        ↓Label [ngx.components.UIDynamicElement-1761575995431]: 
          beanData: '{"ionBean":"Label"}'
          tagName: ion-label
          ↓Header [ngx.components.UIElement-1762012000271]: 
            tagName: h2
            ↓Text [ngx.components.UIText-1762012000273]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.threadTitle(thread)
          ↓Meta [ngx.components.UIElement-1762012000275]: 
            tagName: p
            ↓Text [ngx.components.UIText-1762012000277]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.threadSubtitle(thread)
          ↓Badges [ngx.components.UIControlDirective-1762012000279]: 
            directiveExpression: let badge of this.threadBadges(thread)
            directiveIndexName: badgeIdx
            directiveItemName: badge
            ↓Chip [ngx.components.UIDynamicElement-1762012000281]: 
              beanData: '{"ionBean":"Chip"}'
              tagName: ion-chip
              ↓AttrColor [ngx.components.UIAttribute-1762012000283]: 
                attrName: color
                attrValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:badge.color
              ↓Text [ngx.components.UIText-1762012000285]: 
                textValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:badge.label
          ↓Metrics [ngx.components.UIElement-1762012000287]: 
            tagName: p
            ↓Text [ngx.components.UIText-1762012000289]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'CPU ' + this.formatMillis(thread && thread.cpuTimeMillis) + ' · User ' + this.formatMillis(thread && thread.userTimeMillis) + ' · Waited ' + this.formatMillis(thread && thread.waitedTimeMillis)
          ↓Locks [ngx.components.UIElement-1762012000291]: 
            tagName: p
            ↓Text [ngx.components.UIText-1762012000293]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:'Locks ' + this.formatCount(thread && thread.lockedMonitors) + ' · Blocked ' + this.formatCount(thread && thread.blockedCount)
          ↓StackPreview [ngx.components.UIElement-1762012000295]: 
            tagName: pre
            ↓Attr [ngx.components.UIAttribute-1762012000297]: 
              attrName: style
              attrValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: 'plain:margin: 8px 0; white-space: pre-wrap;'
            ↓Text [ngx.components.UIText-1762012000299]: 
              textValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: script:this.stackPreviewText(thread)
        ↓ButtonGroup [ngx.components.UIElement-1762012000301]: 
          tagName: ion-buttons
          ↓AttrSlot [ngx.components.UIAttribute-1762012000303]: 
            attrName: slot
            attrValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                - MobileSmartSourceType: plain:end
          ↓DetailsButton [ngx.components.UIDynamicElement-1761583600001]: 
            beanData: '{"ionBean":"Button"}'
            tagName: ion-button
            ↓Icon [ngx.components.UIDynamicElement-1761583600005]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:arrow-forward"}'
              tagName: ion-icon
            ↓Event [ngx.components.UIControlEvent-1761583600007]: 
              ↓SetSelectedThread [ngx.components.UIDynamicAction-1761583600009]: 
                beanData: |
                  '{
                   "ionBean": "SetGlobalAction",
                   "Property": "plain:selectedThread",
                   "Value": "script:thread ? JSON.parse(JSON.stringify(thread)) : null"
                  }'
              ↓ResetThreadDetails [ngx.components.UIDynamicAction-1761584001001]: 
                beanData: |
                  '{
                   "ionBean": "SetGlobalAction",
                   "Property": "plain:threadDetails",
                   "Value": "script:null"
                  }'
              ↓FetchThreadDetails [ngx.components.UIDynamicAction-1761584001003]: 
                beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:ConvertigoMonitor.ThreadDetails"}'
                ↓threadId [ngx.components.UIControlVariable-1761584001005]: 
                  varValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                      - MobileSmartSourceType: 'script:thread && thread.id != null ? thread.id : null'
                ↓StoreThreadDetails [ngx.components.UICustomAsyncAction-1761584001007]: 
                  actionValue: 
                    - xmlizable: 
                      - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                      - com.twinsoft.convertigo.beans.common.FormatedContent: 
                        →: |
                          'try {
                              var detail = props.out && props.out.detail ? props.out.detail : null;
                              page.global.threadDetails = detail;
                          } catch (assignErr) {
                              page.c8o.log.warn(''[MB] StoreThreadDetails error'', assignErr);
                          } finally {
                              return;
                          }'
              ↓NavigateDetails [ngx.components.UIDynamicAction-1761583600011]: 
                beanData: '{"ionBean":"PushPageAction","page":"plain:ConvertigoMonitor.Application.NgxApp.ThreadDetails"}'
          ↓CopyButton [ngx.components.UIDynamicElement-1762012000305]: 
            beanData: '{"ionBean":"Button"}'
            tagName: ion-button
            ↓Icon [ngx.components.UIDynamicElement-1762012000307]: 
              beanData: '{"ionBean":"Icon","IconName":"plain:copy"}'
              tagName: ion-icon
            ↓Event [ngx.components.UIControlEvent-1762012000309]: 
              ↓ThreadVar [ngx.components.UIControlVariable-1762012000347]: 
                varValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                    - MobileSmartSourceType: script:thread
              ↓CopyAction [ngx.components.UICustomAction-1762012000311]: 
                actionValue: 
                  - xmlizable: 
                    - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                    - com.twinsoft.convertigo.beans.common.FormatedContent: 
                      →: |
                        'try {
                            this.copyStackPreview(vars.thread);
                        } finally {
                            resolve();
                        }'
  ↓Directive [ngx.components.UIControlDirective-1761575995455]: 
    directiveName: If
    directiveSource: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
        - MobileSmartSourceType: script:!this.sortedThreads().length
    ↓GenericItem [ngx.components.UIDynamicElement-1761575995457]: 
      beanData: '{"ionBean":"GenericItem","Lines":"plain:none"}'
      tagName: ion-item
      ↓Label [ngx.components.UIDynamicElement-1761575995459]: 
        beanData: '{"ionBean":"Label"}'
        tagName: ion-label
        ↓Text [ngx.components.UIText-1761575995461]: 
          textValue: 
            - xmlizable: 
              - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
              - MobileSmartSourceType: plain:No threads captured yet.
↓Footer [ngx.components.UIDynamicElement-1762016000001]: 
  beanData: '{"ionBean":"Footer"}'
  comment: Page footer
  tagName: ion-footer
  ↓ToolBar [ngx.components.UIDynamicElement-1762016000003]: 
    beanData: '{"ionBean":"ToolBar"}'
    tagName: ion-toolbar
    ↓NoteRefresh [ngx.components.UIDynamicElement-1762016000005]: 
      beanData: '{"ionBean":"Note"}'
      tagName: ion-note
      ↓AttrSlot [ngx.components.UIAttribute-1762016000007]: 
        attrName: slot
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:start
      ↓Text [ngx.components.UIText-1762016000009]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.refreshRateLabel()
    ↓NoteUpdated [ngx.components.UIDynamicElement-1762016000011]: 
      beanData: '{"ionBean":"Note"}'
      tagName: ion-note
      ↓AttrSlot [ngx.components.UIAttribute-1762016000013]: 
        attrName: slot
        attrValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: plain:end
      ↓Text [ngx.components.UIText-1762016000015]: 
        textValue: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
            - MobileSmartSourceType: script:this.formatLastUpdateLabel()